

@page "/customers"

@attribute [Authorize(NewBlazorWebAppPermissions.Customers.Default)]
@using NewBlazorWebApp.Customers
@using NewBlazorWebApp.Localization
@using NewBlazorWebApp.Shared
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Components.Web
@using Blazorise
@using Blazorise.Components
@using Blazorise.DataGrid
@using Volo.Abp.BlazoriseUI
@using Volo.Abp.BlazoriseUI.Components
@using Volo.Abp.ObjectMapping
@using Volo.Abp.AspNetCore.Components.Messages
@using Volo.Abp.AspNetCore.Components.Web.Theming.Layout

@using NewBlazorWebApp.Permissions
@using Volo.Abp.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components
@using Volo.Abp.Http.Client
@inherits NewBlazorWebAppComponentBase
@inject ICustomersAppService CustomersAppService

@inject IUiMessageService UiMessageService
@inject AbpBlazorMessageLocalizerHelper<NewBlazorWebAppResource> LH
@inject IRemoteServiceConfigurationProvider RemoteServiceConfigurationProvider
@inject NavigationManager NavigationManager

@* ************************* PAGE HEADER ************************* *@
<PageHeader Title="@L["Customers"]" BreadcrumbItems="BreadcrumbItems" Toolbar="Toolbar">

</PageHeader>

@* ************************* SEARCH ************************* *@
<Card>
    <CardBody>
@*//<suite-custom-code-block-1>*@
@*//</suite-custom-code-block-1>*@
        <Row>
            <div class="col-md-8 col-lg-10">
                <div class="mb-3">
                    <Form id="CustomerSearchForm">
                        <Addons>
                            <Addon AddonType="AddonType.Body">
                                <TextEdit @bind-Text="@Filter.FilterText"
                                        Autofocus="true"
                                        Placeholder="@L["Search"]">
                                </TextEdit>
                            </Addon>
                            <Addon AddonType="AddonType.End">
                                <SubmitButton Form="CustomerSearchForm" Clicked="GetCustomersAsync">
                                    <Icon Name="IconName.Search" Class="me-1"></Icon>@L["Search"]
                                </SubmitButton>
                            </Addon>
                        </Addons>
                    </Form>
                </div>
            </div>
                
                   <div class="col-md-4 col-lg-2">
            <div class="mb-3">
               <Button Color="Color.Primary" Outline Style="width:100%" id="AdvancedFilterSectionToggler"
                         Clicked="@(() => ShowAdvancedFilters = !ShowAdvancedFilters)">@L["Filters"]
                         <i aria-hidden="true" class="fa ms-1 @(!ShowAdvancedFilters ? "fa-angle-down" : "fa-angle-up")"></i>
               </Button>
            </div>
       </div>
        
        <div style="display: @(!ShowAdvancedFilters ? "none" : "block")"  class="mt-3">
            <Row>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["Code"]</FieldLabel>
                        <TextEdit Text="@Filter.Code" TextChanged="@OnCodeChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["Name"]</FieldLabel>
                        <TextEdit Text="@Filter.Name" TextChanged="@OnNameChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["Address"]</FieldLabel>
                        <TextEdit Text="@Filter.Address" TextChanged="@OnAddressChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["MinBalance"]</FieldLabel>
                        <NumericEdit TValue="float?" 
             Value="@Filter.BalanceMin"
             ValueChanged="@OnBalanceMinChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["MaxBalance"]</FieldLabel>
                        <NumericEdit TValue="float?" 
             Value="@Filter.BalanceMax"
             ValueChanged="@OnBalanceMaxChangedAsync" />                       
                    </Field>
                </Column>
            </Row>
@*//<suite-custom-code-block-2>*@
@*//</suite-custom-code-block-2>*@
        </div>

        </Row>

@*//<suite-custom-code-block-3>*@
@*//</suite-custom-code-block-3>*@
    </CardBody>
</Card>

@* ************************* DATA GRID ************************* *@
<Card>
    <CardBody>        
        @if (SelectedCustomers.Any())
        {
            <div class="d-flex justify-content-between align-items-center mb-2">
                @if (AllCustomersSelected)
                {
                    <p class="lead mb-0">
                        @L["AllItemsAreSelected", TotalCount]
                    </p>
                }
                else
                {
                    <p class="lead mb-0">
                        @if (SelectedCustomers.Count > 1)
                        {
                            @L["NumberOfItemsOnThisPageAreSelected", SelectedCustomers.Count]
                        }
                        else
                        {
                            @L["OneItemOnThisPageIsSelected"]
                        }
                    </p>
                }
                    
                <div>
                    @if ((SelectedCustomers.Count == PageSize || SelectedCustomers.Count == CustomerList.Count) && TotalCount > SelectedCustomers.Count)
                    {
                        if (!AllCustomersSelected)
                        {
                            <Button Clicked="SelectAllItems" Class="mx-1 btn-outline-secondary">@L["SelectAllItems", TotalCount]</Button>
                        }
                        else
                        {
                            <Button Clicked="ClearSelection" Class="mx-1 btn-outline-secondary">@L["ClearSelection"]</Button>
                        }
                    }
                    
                    <Button Color="Color.Danger" Class="mx-1" Size="Size.Medium" Clicked="DeleteSelectedCustomersAsync">
                        <Icon Name="@IconName.Delete" /> @L["Delete"]
                    </Button>
                </div>
            </div>
            
            <hr class="my-1 mx-0"/>
        }
        <DataGrid TItem="CustomerDto"
                  Data="CustomerList"
                  
                  SelectionMode="DataGridSelectionMode.Multiple"
                  SelectedRows="SelectedCustomers"
                  RowSelectable="@((args) => CanDeleteCustomer)"
                  SelectedRowsChanged="SelectedCustomerRowsChanged"
                  
                  
                  
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  Responsive="true"
                  PageSize="PageSize"
                  Class="datagrid-detail">
            <LoadingTemplate>
                <Row Class="w-100 align-items-center" Style="height: 150px;">
                    <Column>
                       <RadarSpinner />
                    </Column>
                </Row>
            </LoadingTemplate>
            <EmptyTemplate>
                <Row Class="w-100 align-items-center" Style="height: 150px;">
                    <Column>
                        <Heading Size="HeadingSize.Is4" TextAlignment="TextAlignment.Center">@L["NoDataAvailable"]</Heading>
                    </Column>
                </Row>
            </EmptyTemplate>   
            <DataGridColumns>
                
                @if (CanDeleteCustomer && CustomerList.Any())
                {
                    <DataGridMultiSelectColumn TItem="CustomerDto" DisplayOrder="-1" Width="30px"></DataGridMultiSelectColumn>
                }
                
                <DataGridEntityActionsColumn TItem="CustomerDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <EntityActions TItem="CustomerDto" EntityActionsColumn="@EntityActionsColumn">
                            <EntityAction TItem="CustomerDto"
                                          Visible="@CanEditCustomer"
                                          Clicked="async () => await OpenEditCustomerModalAsync(context)"
                                          Text="@L["Edit"]"></EntityAction>
                            <EntityAction TItem="CustomerDto"
                                          Visible="@CanDeleteCustomer"
                                          Clicked="() => DeleteCustomerAsync(context)"
                                          ConfirmationMessage="@(()=> L["DeleteConfirmationMessage"])"
                                          Text="@L["Delete"]"></EntityAction>
@*//<suite-custom-code-block-4>*@
@*//</suite-custom-code-block-4>*@
                        </EntityActions>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>
               
              <DataGridColumn TItem="CustomerDto"
                      Field="Code"
                      Caption="@L["Code"]">
              </DataGridColumn>

              <DataGridColumn TItem="CustomerDto"
                      Field="Name"
                      Caption="@L["Name"]">
              </DataGridColumn>

              <DataGridColumn TItem="CustomerDto"
                      Field="Address"
                      Caption="@L["Address"]">
              </DataGridColumn>

              <DataGridColumn TItem="CustomerDto"
                      Field="Balance"
                      Caption="@L["Balance"]">
              </DataGridColumn>

              <DataGridColumn TItem="CustomerDto"
                      Field="DocumentsId"
                      Caption="@L["Documents"]">
                      <DisplayTemplate>
                        @if (context.DocumentsId != null && context.DocumentsId != Guid.Empty)
                        {   
                            <Icon Name="IconName.FileAlt" Clicked="async () => await DownloadFileAsync(context.DocumentsId)" />
                        }
                        else
                        {
                            <span>"-"</span>
                        }
                      </DisplayTemplate>
              </DataGridColumn>

            </DataGridColumns>
            
            
        </DataGrid>
    </CardBody>
</Card>

@* ************************* CREATE MODAL ************************* *@
<Modal @ref="CreateCustomerModal" Closing="@CreateCustomerModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">
@*//<suite-custom-code-block-5>*@
@*//</suite-custom-code-block-5>*@
        <Form id="CreateCustomerForm">
            <ModalHeader>
                <ModalTitle>@L["NewCustomer"]</ModalTitle>
                <CloseButton Clicked="CloseCreateCustomerModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@NewCustomerValidations"
                            Mode="ValidationMode.Auto"
                            Model="@NewCustomer"
                            ValidateOnLoad="false">
                    
                    
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Code"] *</FieldLabel>
                            <TextEdit @bind-Text="@NewCustomer.Code"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Name"]</FieldLabel>
                            <TextEdit @bind-Text="@NewCustomer.Name"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Address"]</FieldLabel>
                            <TextEdit @bind-Text="@NewCustomer.Address"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Balance"]</FieldLabel>
                            <NumericPicker TValue="float" @bind-Value="@NewCustomer.Balance"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                        <Field>
                            <FieldLabel>@L["Documents"] *</FieldLabel>
                            <InputFile class="form-control file-input" OnChange="@OnNewCustomerDocumentsChanged" required/>
                            @if (OnNewCustomerDocumentsLoading)
                            {
                                <p>@L["FileUploading"]</p>
                            }
                            <p class="text-muted pt-1"><i class="fa fa-info-circle"></i> @L["MaxFileSizeLimit", 10]</p>
                        </Field>


                    
                    
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateCustomerModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="CreateCustomerForm" Clicked="CreateCustomerAsync" Disabled="@IsCreateFormDisabled()"/>
@*//<suite-custom-code-block-6>*@
@*//</suite-custom-code-block-6>*@
            </ModalFooter>
        </Form>
@*//<suite-custom-code-block-7>*@
@*//</suite-custom-code-block-7>*@
    </ModalContent>
</Modal>

@* ************************* EDIT MODAL ************************* *@
<Modal @ref="EditCustomerModal" Closing="@EditCustomerModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">
@*//<suite-custom-code-block-8>*@
@*//</suite-custom-code-block-8>*@
        <Form id="EditCustomerForm">
            <ModalHeader>
                <ModalTitle>@L["Update"]</ModalTitle>
                <CloseButton Clicked="CloseEditCustomerModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@EditingCustomerValidations"
                            Mode="ValidationMode.Auto"
                            Model="@EditingCustomer"
                            ValidateOnLoad="false">
                    
                    
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Code"] *</FieldLabel>
                            <TextEdit @bind-Text="@EditingCustomer.Code"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Name"]</FieldLabel>
                            <TextEdit @bind-Text="@EditingCustomer.Name"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Address"]</FieldLabel>
                            <TextEdit @bind-Text="@EditingCustomer.Address"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Balance"]</FieldLabel>
                            <NumericPicker TValue="float" @bind-Value="@EditingCustomer.Balance"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Field>
                        <FieldLabel>@L["Documents"] *</FieldLabel>
                        @if (HasSelectedCustomerDocuments)
                        {
                            <div class="mb-2">
                                <div class="btn-group" role="group">
                                    <button type="button" class="btn btn-primary" data-bs-toggle="tooltip" data-bs-placement="top" title="@L["DownloadSelectedFile"].Value" @onclick="@(async () => await DownloadFileAsync(EditingCustomer.DocumentsId))"><i class="fa fa-file-alt"></i></button>
                                    <button type="button" class="btn btn-primary btn-danger" data-bs-toggle="tooltip" data-bs-placement="top" title="@L["RemoveSelectedFile"].Value" @onclick="(() => { EditingCustomer.DocumentsId = Guid.Empty; HasSelectedCustomerDocuments = false; })"><i class="fa fa-trash"></i></button>
                                </div>
                            </div>
                        }
                        else
                        {
                            <Field>
                                <InputFile class="form-control file-input" OnChange="@OnEditCustomerDocumentsChanged" required/>
                                @if (OnEditCustomerDocumentsLoading)
                                {
                                    <p>@L["FileUploading"]</p>
                                }
                                <p class="text-muted pt-1"><i class="fa fa-info-circle"></i> @L["MaxFileSizeLimit", 10]</p>
                            </Field>
                        }
                    </Field>

                    
                    
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditCustomerModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="EditCustomerForm" Clicked="UpdateCustomerAsync" Disabled="@IsEditFormDisabled()" />
@*//<suite-custom-code-block-9>*@
@*//</suite-custom-code-block-9>*@
            </ModalFooter>
        </Form>
@*//<suite-custom-code-block-10>*@
@*//</suite-custom-code-block-10>*@
    </ModalContent>
</Modal>

